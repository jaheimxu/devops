1.1 什么是Service？
在 Kubernetes 中，Service 是一种抽象的资源，它提供了稳定的访问接口，将外部或集群内部的流量路由到对应的 Pod 上。Pod 是 Kubernetes 中的基本调度单元，但它们是临时的，IP 地址和生命周期都可能发生变化。Service 为 Pod 提供一个稳定的访问方式，解决了 Pod 的动态 IP 问题。
Kubernetes 的 Service 有几种不同的类型，能够帮助我们根据不同的需求将服务暴露给外部用户或者集群内部的其他服务。

1.2 Service 的核心概念
1.2.1 Pod 和 Service
每个 Pod 都会有一个 IP 地址，但当 Pod 被销毁、重建或调度到其他节点时，Pod 的 IP 地址会发生变化。所以不能直接使用 Pod IP 地址来访问服务。
Service 专门用来解决这个问，它为一组 Pod 提供一个稳定的访问入口，不会随着 Pod 的变化而变化。Service 将流量路由到匹配标签的 Pod 上，并为客户端提供一个固定的 IP 地址和 DNS 名称来访问这些 Pod。
Service是根据标签label来匹配Pod的
1.2.2 Service 和 Endpoints
Endpoints 是与 Service 关联的资源，它记录了与该 Service 匹配的 Pod 的 IP 地址。当 Service 创建时，Kubernetes 会根据标签选择器（selector）找到符合条件的 Pod，并自动生成 Endpoints，确保流量能够正确地路由到这些 Pod。
容易混淆的几个端口的关系

1.3.1 ClusterIP（默认类型）
功能：ClusterIP 类型的 Service 只能在集群内部访问，外部无法直接访问该服务。它为服务分配一个虚拟 IP 地址（ClusterIP），客户端通过该 IP 与服务进行通信。

1.3.2 NodePort
功能：NodePort 类型的 Service 将服务暴露到每个 Node 上的指定端口，外部客户端可以通过访问任意 Node 的 IP 地址和指定端口来访问该服务。
用途：适用于开发和测试场景，或者希望通过某个特定端口暴露服务的场景。简单的应用也可以通过NodePort发布业务，大型业务一般通过Ingress。

1.3.3 LoadBalancer
功能：LoadBalancer 类型的 Service 会在云环境中创建一个外部负载均衡器，LoadBalancer是在NodePort基础上，将外部流量自动分发到集群中的多个 Pod 上。
用途：适用于需要对外暴露服务，并且需要自动负载均衡的生产环境。

1.3.4 ExternalName
功能：ExternalName 类型的 Service 将流量路由到外部的 DNS 名称，而不是内部的 Pod。
用途：适用于需要访问集群外部服务（如外部数据库或第三方 API）的场景。

2 Service 工作原理
2.1 Pod 的 IP 和生命周期管理
每个 Pod 都有一个自己的 IP 地址，当 Pod 被删除或重新调度时，IP 地址会发生变化。Kubernetes 会监控这些变化，并确保流量能够正确地转发到新的 Pod 上。
2.2 Service 的创建与标签选择器
Service 通过标签选择器来匹配需要暴露的 Pod。当 Service 创建时，Kubernetes 会根据该标签选择器找到所有匹配的 Pod，并通过 Endpoints 记录它们的 IP 地址。
2.3 DNS 解析
Kubernetes 会为每个 Service 分配一个 DNS 名称，Pod 可以通过 DNS 名称访问 Service，而不需要关心具体的 IP 地址。这使得服务发现变得非常容易。

