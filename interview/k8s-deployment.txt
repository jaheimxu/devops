ReplicationController 和 ReplicaSet
ReplicationController (RC)用来确保容器应用的副本数始终保持在用户定义的副本数，即如果有容器异常退出，会自动创建新的pod来替代；而异常多出来的容器也会自动回收。

在新版的Kubernetes中建议使用ReplicaSet (RS)来取代ReplicationController。ReplicaSet跟ReplicationController没有本质的不同，只是名字不一样，但ReplicaSet支持集合式selector。

虽然 ReplicaSets 可以独立使用，但如今它主要被Deployments 用作协调 Pod 的创建、删除和更新的机制。当使用 Deployment 时，你不必担心还要管理它们创建的 ReplicaSet，Deployment 会拥有并管理它们的 ReplicaSet。

ReplicaSet 是下一代的 Replication Controller。 ReplicaSet 和 Replication Controller 的唯一区别是选择器的支持。ReplicaSet 支持新的基于集合的选择器需求，这在标签用户指南中有描述。而 Replication Controller 仅支持基于相等选择器的需求。

Deployments
Deployment 控制器为 Pods和 ReplicaSets提供描述性的更新方式。用来替代以前的ReplicationController以方便管理应用。

典型的应用场景包括：

定义Deployment来创建Pod和ReplicaSet
滚动升级和回滚应用
扩容和缩容
暂停和继续Deployment


Kubernetes的滚动更新(Rolling Update)是如何工作的
2024-03-07
221
百科
滚动更新是Kubernetes用于应用部署的一种策略。滚动更新允许你逐步替换特定数量的旧版本Pods为新版本，从而实现零停机升级。Kubernetes通过Deployment resource来管理滚动更新。在滚动更新期间，新Pods会被逐个创建，与此同时，等量的旧Pods会被逐个终止，直到所有Pods都被更新为止。

滚动更新的工作原理主要基于定义的Deployment资源内的 `spec.strategy.type` 设定。当设置为RollingUpdate时，Kubernetes 按照 `spec.strategy.rollingUpdate.maxUnavAIlable` 和 `spec.strategy.rollingUpdate.maxSurge` 的定义执行更新。`maxUnavailable` 设定了在更新过程中能有多少Pod处于不可用状态；而`maxSurge` 则决定了可额外创建的Pod数量上限，即在更新过程中，允许超出预期Replica数量的范畴。

为了更好地理解滚动更新，在正文中，我们将详细讨论其工作机制、实现方式以及配置事项。

正文：

一、KUBERNETES ROLLING UPDATE 机制
滚动更新作为Kubernetes最重要的部署方式之一，保证了服务的连续性和可靠性。滚动更新策略由两个关键参数控制：`maxUnavailable` 和 `maxSurge`。

`maxUnavailable` – 这个参数定义了在任何时间点，有多少个应用实例（Pods）是允许不可用的。若设置为百分比，则表示相对于Desired状态下Pod数量的比例；若设置为具体数字，则表示具体允许不可用的Pod数量。这个参数的主要作用是保证服务在更新期间的可用性。

`maxSurge` – 这个参数定义了在更新过程中，可以超出Desired状态所期望Pod数量的最大个数。这意味着可以有更多的Pod运行，以确保部署过程中服务的连续提供和性能不会受过多影响。跟`maxUnavailable`参数相似，`maxSurge`也可以设置为百分比或具体数字。

当Deployment触发滚动更新时，Kubernetes首先会参照`maxSurge`参数创建新的Pods。完成新Pod的创建并且它们开始服务后，接下来，旧的Pods按照`maxUnavailable`参数逐步被替换为新的Pods。此过程会循环进行，直到所有旧的Pods被新的Pods取代为止。

二、DEPLOYMENT配置及更新流程
在配置Deployment资源时，开发者需要通过编辑YAML文件来设置更新策略。通常情况下，这些设置会在Deployment资源的spec部分进行。

滚动更新的具体流程为：

1. 更新Deployment的YAML文件 – 对应用的新版本通常会有新的配置或Docker镜像，这需要在Deployment的YAML配置文件中指定。

2. 通过Kubectl应用YAML文件 – 更新的YAML文件需要通过kubectl命令应用到Kubernetes集群，触发滚动更新过程。

在整个过程中，如果新的Pod健康并准备好提供服务（即通过readiness probes检查），则会开始终止旧的Pod。此过程是逐步进行的，直到所有旧Pods替换完成。

三、优雅的更新及健康检查
为了确保更新的过程不会影响用户体验，Kubernetes提供了readiness probes和liveness probes来检查应用的健康状况。这些检查确保了只有当新的Pod准备好接受流量时才会将之纳入服务中。

readiness probe 确保Pod准备好接受流量之前，不会将其导入服务流量。如果一个Pod不能通过readiness probe，它将从Service的负载均衡器中移除，直到它通过为止。

liveness probe 则检查应用是否运行正常。如果liveness probe失败，Kubernetes会重启该Pod以尝试修复问题。

通过这些健康检查的配合，滚动更新能够更加平滑地进行，而不会导致服务中断。




Part 01、升级策略 
K8S中通过spect.strategy来定义新的 Pod 替换为旧的Pod的策略。策略类型分为：重建策略（Recreate）或滚动升级策略（RollingUpdate），默认为 RollingUpdate。

Recreate -- 在创建出新的Pod之前会先删掉所有已存在的Pod。

RollingUpdate -- 可以指定maxSurge和maxUnavailable来控制滚动升级过程。

maxSurge：用来指定升级期间可以超过预期Pod数量的最大值，该值可以是一个绝对数（例如：5）或一个预期 Pod 的百分比（例如：10%），默认为 25%。通过百分比计算的绝对值向上取整。
maxUnavailable：用来指定升级期间不可用的最大 Pod 数量。该值可以是一个绝对数（例如：5）或一个预期 Pod 的百分比（例如：10%），默认为 25%。通过百分比计算的绝对值向下取整。
在业务中我们默认使用滚动升级策略，通过合理配置maxSurge和maxUnavailable实现业务高可用。

Part 02、健康检查 
K8S中通过探针对容器执行定期诊断来判断容器的状态，通常使用存活性探针（liveness probes）和就绪性探针（readiness probes）根据容器状态进行后续处理。

livenessProbe：探测容器是否正在运行。如果存活探测失败，则 kubelet 会杀死容器，并且容器将受到其重启策略的影响。如果容器不提供存活探针，则默认状态为 Success。
readinessProbe：探测容器是否准备好服务请求。如果就绪探测失败，端点控制器将从与 Pod 匹配的所有Service的端点中删除该Pod的IP地址。初始延迟之前的就绪状态默认为 Failure。如果容器不提供就绪探针，则默认状态为 Success。
在业务中我们经常同时使用这两种探针，通过存活性探针判断容器是否需要重启以实现自愈，通过就绪性探针判断容器是否已经准备好对外提供服务。

Part 03、K8S滚动升级原理
K8S通过Deployment创建副本，Deployment是一个三级结构：Deployment控制Replicaset（副本集），Replicaset控制Pod。根据Deployment的这个结构特性，一个Deployment下可存在不同的Replicaset，那就表示一个Deployment下可以有不同镜像版本的Pod同时存在。

升级过程中Deployment自动创建Replicaset，Replicaset通过滚动升级策略中maxSurge、maxUnavailable两个参数来精准地控制每次滚动的Pod数量。再结合健康检查中的存活性探针（liveness probes）和就绪性探针（readiness probes）来精准判断Pod何时启动成功以及何时准备好服务请求，确保升级过程中可用的Pod都是可正常提供服务的
